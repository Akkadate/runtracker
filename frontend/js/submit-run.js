// Simplified submit-run.js with lowercase field names
document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM Content Loaded - Initializing simplified submit-run.js");
    
    // Add click handler to the submit button
    const submitButton = document.getElementById('submitButton');
    if (submitButton) {
        console.log("Submit button found, adding click handler");
        submitButton.addEventListener('click', handleSubmit);
    } else {
        console.error("Submit button with ID 'submitButton' not found!");
    }
    
    // Add change handler for file input
    const fileInput = document.getElementById('proofImage');
    if (fileInput) {
        console.log("File input found, adding change handler");
        fileInput.addEventListener('change', handleFileChange);
    } else {
        console.error("File input with ID 'proofImage' not found!");
    }
    
    // Add click handler for retry button
    const retryButton = document.getElementById('retryButton');
    if (retryButton) {
        retryButton.addEventListener('click', function() {
            document.getElementById('errorMessage').classList.add('hidden');
            document.getElementById('runForm').classList.remove('hidden');
        });
    }
    
    // Initialize default date
    const rundateInput = document.getElementById('rundate');
    if (rundateInput) {
        const today = new Date().toISOString().split('T')[0];
        rundateInput.value = today;
        console.log("Default date set to:", today);
    }
    
    console.log("Initialization complete");
});

// Handle file selection for preview
function handleFileChange(event) {
    console.log("File input changed");
    const file = event.target.files[0];
    if (file) {
        console.log("File selected:", file.name, "Size:", file.size, "Type:", file.type);
        const reader = new FileReader();
        reader.onload = function(e) {
            const imagePreview = document.getElementById('imagePreview');
            if (imagePreview) {
                imagePreview.innerHTML = `<img src="${e.target.result}" alt="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û">`;
                console.log("Image preview created");
            }
        };
        reader.readAsDataURL(file);
    }
}

async function handleSubmit() {
    console.log("Submit button clicked");
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° debug
    showDebug("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...");
    
    try {
        // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
        const rundate = document.getElementById('rundate').value;
        const distance = document.getElementById('distance').value;
        const duration = document.getElementById('duration').value;
        const proofImage = document.getElementById('proofImage').files[0];
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if (!rundate) {
            showError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πà‡∏á");
            return;
        }
        
        if (!distance) {
            showError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á");
            return;
        }
        
        if (!duration) {
            showError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ");
            return;
        }
        
        if (!proofImage) {
            showError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô");
            return;
        }
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° debug
        showDebug(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà=${rundate}, ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á=${distance}, ‡πÄ‡∏ß‡∏•‡∏≤=${duration}, ‡πÑ‡∏ü‡∏•‡πå=${proofImage.name}`);
        
        // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        const submitButton = document.getElementById('submitButton');
        if (submitButton) {
            submitButton.disabled = true;
            submitButton.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...';
        }
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå LINE
        showDebug("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå LINE...");
        let userId;
        try {
            const profile = await liff.getProfile();
            userId = profile.userId;
            showDebug(`‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö userId: ${userId}`);
        } catch (profileError) {
            showError(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå LINE ‡πÑ‡∏î‡πâ: ${profileError.message}`);
            return;
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        showDebug("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á...");
        const formData = new FormData();
        
        // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà backend ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        formData.append('file', proofImage);  // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 'file' ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô
        formData.append('userid', userId);    // ‡πÉ‡∏ä‡πâ 'userid' ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å
        formData.append('rundate', rundate);  // ‡πÉ‡∏ä‡πâ 'rundate' ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å
        formData.append('distance', distance);
        formData.append('duration', duration);
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° debug
        showDebug(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á: userid=${userId}, rundate=${rundate}, distance=${distance}, duration=${duration}, file=${proofImage.name}`);
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
        showDebug("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API...");
        const response = await fetch('https://runtracker.devapp.cc/api/runs/upload', {
            method: 'POST',
            body: formData  // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î Content-Type ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ browser ‡∏à‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        });
        
        // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        showDebug(`‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ${response.status}`);
        const responseText = await response.text();
        showDebug(`‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ${responseText}`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        if (!response.ok) {
            throw new Error(`‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.status} - ${responseText}`);
        }
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON
        let result;
        try {
            result = JSON.parse(responseText);
            showDebug(`‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå API: ${JSON.stringify(result)}`);
        } catch (e) {
            showDebug("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÑ‡∏î‡πâ");
        }
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå
        window.currentRunData = {
            rundate: rundate,
            distance: distance,
            duration: duration,
            imageurl: result?.imageurl || result?.run?.imageurl || ''
        };
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        showDebug("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        document.getElementById('runForm').classList.add('hidden');
        document.getElementById('successMessage').classList.remove('hidden');
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ä‡∏£‡πå
        const shareButton = document.getElementById('shareButton');
        if (shareButton) {
            shareButton.addEventListener('click', shareRunResult);
        }
    } catch (error) {
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        showDebug(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
        console.error('Error submitting run data:', error);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        document.getElementById('errorText').textContent = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${error.message}`;
        document.getElementById('runForm').classList.add('hidden');
        document.getElementById('errorMessage').classList.remove('hidden');
    } finally {
        // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        const submitButton = document.getElementById('submitButton');
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.textContent = '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
        }
    }
}

// Share run result to LINE
function shareRunResult() {
    if (!window.currentRunData) {
        console.error('No run data available for sharing');
        return;
    }
    
    console.log('Sharing run result:', window.currentRunData);
    
    // Format date
    const runDate = new Date(window.currentRunData.rundate).toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
    
    // Create message
    const message = `üèÉ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${runDate}\nüèÅ ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: ${window.currentRunData.distance} ‡∏Å‡∏°.\n‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤: ${window.currentRunData.duration} ‡∏ô‡∏≤‡∏ó‡∏µ`;
    
    // Share via LINE
    if (liff.isApiAvailable('shareTargetPicker')) {
        const shareContent = [
            {
                type: "text",
                text: message
            }
        ];
        
        // Add image if available
        if (window.currentRunData.imageurl && window.currentRunData.imageurl !== 'https://example.com/placeholder.jpg') {
            shareContent.push({
                type: "image",
                originalContentUrl: window.currentRunData.imageurl,
                previewImageUrl: window.currentRunData.imageurl
            });
        }
        
        // Share content
        liff.shareTargetPicker(shareContent)
            .then(function(res) {
                if (res) {
                    alert('‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
                }
            })
            .catch(function(error) {
                console.error('ShareTargetPicker failed', error);
                alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ' + error.message);
            });
    } else {
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ');
    }
}

// Helper functions for showing errors and debug info
function showError(message) {
    console.error(message);
    alert(message);
}

// Create debug overlay
function createDebugOverlay() {
    // Check if overlay already exists
    if (document.getElementById('debugOverlay')) {
        return;
    }
    
    const overlay = document.createElement('div');
    overlay.id = 'debugOverlay';
    overlay.style.position = 'fixed';
    overlay.style.top = '10px';
    overlay.style.right = '10px';
    overlay.style.width = '300px';
    overlay.style.maxHeight = '80vh';
    overlay.style.overflowY = 'auto';
    overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
    overlay.style.color = '#fff';
    overlay.style.padding = '10px';
    overlay.style.borderRadius = '5px';
    overlay.style.zIndex = '9999';
    overlay.style.fontSize = '12px';
    overlay.style.fontFamily = 'monospace';
    
    const title = document.createElement('div');
    title.textContent = 'DEBUG INFO';
    title.style.fontWeight = 'bold';
    title.style.marginBottom = '5px';
    title.style.borderBottom = '1px solid #fff';
    overlay.appendChild(title);
    
    const content = document.createElement('div');
    content.id = 'debugContent';
    overlay.appendChild(content);
    
    document.body.appendChild(overlay);
}

function showDebug(message) {
    console.log(message);
    
    // Create overlay if it doesn't exist
    createDebugOverlay();
    
    // Add message to overlay
    const content = document.getElementById('debugContent');
    if (content) {
        const entry = document.createElement('div');
        entry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
        entry.style.marginBottom = '3px';
        entry.style.borderBottom = '1px dotted #555';
        entry.style.paddingBottom = '3px';
        content.appendChild(entry);
        
        // Scroll to bottom
        content.scrollTop = content.scrollHeight;
    }
}
